
You already set your global config for user.name and user.email.
To check if they are really applied, you can run:

üîπ Check only one config value
git config --global user.name
git config --global user.email


üëâ This will print exactly what you set (Nikhil Patil and your email).

üîπ Check all global configs
git config --global --list


üëâ Shows everything set globally (user.name, user.email, any aliases, etc.).

üîπ Check local repo config

If you want to see configs only for this project, run:

git config --list


or

git config --local --list


üëâ This shows settings inside .git/config of your current repo.

üîπ Check system + global + local (all combined)
git config --list --show-origin


üëâ This will show where each setting comes from (system, global, or local file).

‚ö° So in your case, if you run:

git config --global --list


you should see:

user.name=Nikhil Patil
user.email=np00668832@gmail.com





// git restore --staged <file> 


// git restore <file> 
This throws away your local modifications and restores the file content from the last committed state (HEAD).
Unstage a file (but keep changes in working directory):

git restore --staged <file>


üëâ If you ran git add file.txt by mistake, this will remove it from staging, but keep your changes in the file.

Restore file from another commit/branch:

git restore --source=<commit_hash> <file>

üëâ This will replace your file content with how it was in that commit.


//  Created the Branch  
git branch employee  // create a branch named employee 
git checkout employee // will switch to this branch employee from main . 


Meaning of the Codes
A = Added (untracked file added)
‚Üí The file git_basic.json exists in your working directory but was not in the index/commit history of the branch you checked out.
Git is telling you: "I had to add this untracked file into the working tree."
M = Modified
‚Üí The file learn.js is present in both branches, but its content was modified in your working directory compared to the commit you checked out.
Git is letting you know it merged in the modification instead of discarding it.





// HOW TO CREATE AND PUSH THE BRANCH. 
Here‚Äôs the proper workflow after you create a branch:

1Ô∏è‚É£ Create and switch to a branch
git checkout -b employee


or

git branch employee
git checkout employee

2Ô∏è‚É£ Make changes

Add new files or modify existing files in your working directory.

3Ô∏è‚É£ Stage your changes
git add .


or for specific files:

git add learn.js git_basic.json


This moves the changes to the staging area.

4Ô∏è‚É£ Commit the changes
git commit -m "Added employee branch changes"


This records the changes in your local branch history.

5Ô∏è‚É£ Push the branch to GitHub
git push origin employee


Now the employee branch will appear on GitHub.

Until you push, the branch exists only locally.

‚ö° Important:
If you create a branch but don‚Äôt add, commit, and push, GitHub will not show it. Only your local Git will know about it.


4Ô∏è‚É£ Push the branch to GitHub
git push origin employee    
Now the employee branch and your changes will appear on GitHub.





**************************VERY IMPORTANT THING IS THAT ************************************************

NOW I HAVE CREATED THE EMPLOYEE BRANCH AND BEFORE THAT I HAVE PUSHED THE BASIC CODE IN THE  MAIN BRANCH 
SO THE MAIN BRANCH IS CONTAINING 

1. SINGLE FUNCTION TO CHECK THE STRING FREQUENCY BUT NOT THE FUNCTION OF LARGEST NUMBER FOUND OK. 


2. NOW I HAVE  WORKED ON THE BRANCH  EMPLOYEE AND HAD WORKED ON THAT BRANCH AND CREATED A FUNCTION IN THE FILE 
LEARN.JS  [ TO FIND OUT THE LARGEST NUMBER]

AFTER ADD. AND COMMIT I HAVE PUSHED THAT BRANCH  SO THE CHANGES ARE NOT SHOWING INSIDE THE MAIN BUT ONLY THE EMPLOYEE BRANCH 

3. NOW WE HAVE TO  PULL REQUEST AND DO HAVE TO MERGE THE CODE BY PR PULL REQUEST . 
PR= A REQUEST TO MERGE YOUR CHANGES FROM A BRANCH TO THE MAIN BRANCH OR DEVELOP BRANCH OR ANY OF THE BRANCH . 

SO WE HAVE TO  



*************IF COMMITED AND WANT TO UNCOMMIT THE CHANGES ******************************
If you‚Äôve already committed and want to ‚Äúundo‚Äù that commit, there are a few options depending on what you want to do with the changes:

1Ô∏è‚É£ Undo the last commit but keep the changes staged
git reset --soft HEAD~1
HEAD~1 means the last commit.
Your changes remain staged (ready to commit again).
2Ô∏è‚É£ Undo the last commit and unstage the changes
git reset --mixed HEAD~1
Your changes remain in the working directory, but not staged.
You can modify them or stage them again.
3Ô∏è‚É£ Undo the last commit and discard changes
git reset --hard HEAD~1
Be careful: this deletes your last commit and changes permanently.
Nothing remains in your working directory.
üîπ Extra Notes
If the commit has already been pushed to remote, use git revert instead:
git revert <commit-hash>
This creates a new commit that undoes the previous commit without rewriting history.







üîπ Case 1: You are on main but want to push to remote employee

Suppose:

Local branch = main
Remote branch = employee
You can directly specify the source (your local branch) and the destination (remote branch):
git push origin main:employee

